#pragma once
#include "str.h"
#include <stdint.h>

//Макросы - индикаторы
#define INSERTED 0 //Элемент был вставлен
#define FOUND 1    //Элемент был найден

//Структура, инкапсулирующая в себе ключ и значение дерева
//Так как для логики программы, в одном месте требуется вернуть не только значение, но и ключ
//данная структура помогает вернуть значение и ключ без указателей на left и right
typedef struct{
    String key;
    uint64_t val;
}StrMapData;

//Нода дерева
typedef struct StrMapNode{
    struct StrMapNode *left;
    struct StrMapNode *right;
    StrMapData data;
}StrMapNode;

//Структура, инкопсулирующая в себе корень дерева
typedef struct{
    StrMapNode* root;
    size_t size;
}StrMap;

//Начальная инициализация дерева, корень инициализируется как NULL, а size как 0
void map_init(StrMap* map);
//Осуществляет вставку или поиск элмента в дерве
//По ключу создает элемент в дереве и возвращает указатель на StrMapData
//Если элемент существует в дереве, возвращает указатель на StrNodeData
//Если произошла ошибка возвращает NULL
//Первый аргумент - ключ
//Вторйо аргумент = указатель на структуру содержающу. корень дерева StrMap
//Третий аргумент - флаг, указывающий на то, был элемент вставлен или найден
StrMapData* map_insert_or_search(char* key, StrMap* map, int* flag);
//Осуществляет рекурсивное удаление всех узлов дерева
void map_release(StrMap* map);
//Осуществляет пост обход и выполняет функцию work на каждом узле
//Первый аргумент - дерево
//Второй аргумент - функция выполняющая действие на узле, принимает в себя поля с данными ноды дерева и структуру с
//данными для своей работы
//Третий аргумент - структура, содержащая данные для функции из второго аргумента
void map_pre_order(StrMap* map, void(*work)(StrMapData* data, void* data_for_work), void* data_for_work);