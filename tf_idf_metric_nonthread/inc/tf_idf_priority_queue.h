#pragma once
#include <stdlib.h>

#include "tf_idf_data.h"

//Очередь с приоритетом для tf-idf метрик
//Содержит массив структур tf-idf метрик, количество элментов и аллоцированный размер
typedef struct{
    Tf_Idf* array;
    size_t size;
    size_t alloc_size;
}Tf_IdfPriorityQueue;

//Инициализирует очередь с приоритетом
//Создает массив размером alloc_size + 1
//Если alloc_size = 0, массив будет равен NULL
//Первый аргумент - сама очередь
//Второй аргумент - размер очереди
//В случае успеха возвращает 0
//В случае неуспеха возвращает -1
int pq_init(Tf_IdfPriorityQueue* queue, size_t alloc_size);
//Добавляет элемент в очередь с приоритетом
//Первый аргуммент tf-idf метрика, по которой происходит распределение
//Второй аргумент - индекс слова в массиве слов
//Третий аргумент - сама очередь
//В случае успеха возвращает 0
//В случае неуспеха возвращает -1
int pq_push(double tf_idf, size_t index_in_word_tf_arr, Tf_IdfPriorityQueue* queue);
//Вытаскивает максимальный элемент из очереди
//Первый аргумент - очередь
//Второй аргумент - указатель на структуру tf-idf, которая будет заполнена значениями максимального элмента
//В случае успеха возвращает индекс слова в массиве слов
//В случае неуспеха возаращает -1
int64_t pq_pop(Tf_IdfPriorityQueue* queue, Tf_Idf* tf_idf);
//Очищает памяти внутри структуры
//На вход принимает очердь
void pq_release(Tf_IdfPriorityQueue* queue);